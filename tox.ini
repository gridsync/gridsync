[tox]
envlist = py{310,311},lint
skip_missing_interpreters = True
ignore_basepython_conflict = True

[testenv]
usedevelop = True
# basepython = {env:TOX_BASEPYTHON:python3.10}
# XXX The current version of Tahoe-LAFS (1.18.0) doesn't support Python 3.11;
# this constraint can/should be removed after the next Tahoe-LAFS release.
basepython = python3.10
install_command = {envpython} scripts/reproducible-pip.py install --no-deps {opts} {packages}
setenv =
    # The time saved by having bytecode around instead of having to recompile
    # the source code is probably negligible.  Even if it isn't, avoiding the
    # extra complexity involved in having the bytecode around (is it for the
    # right Python version?  How does it interact with the pytest-generated
    # bytecode?  is it up-to-date with respect to the source files?  etc) is a
    # far greater cost.  So, don't have bytecode.
    PYTHONDONTWRITEBYTECODE=1

    # Remove a source of non-determinism from the builds by making sure
    # strings hash to the same value from one run to the next.
    PYTHONHASHSEED=1

    # Avoid modifying logs in the main Gridsync config dir during test runs
    GRIDSYNC_LOGGING_PATH=.logs

    pyqt6: QT_API=pyqt6
    pyside6: QT_API=pyside6
deps =
    -r{toxinidir}/{env:GRIDSYNC_REQUIREMENTS_DIR:requirements}/gridsync.txt
    -r{toxinidir}/{env:GRIDSYNC_REQUIREMENTS_DIR:requirements}/{env:QT_API:pyqt6}.txt
    -r{toxinidir}/{env:GRIDSYNC_REQUIREMENTS_DIR:requirements}/test.txt
commands =
    # XXX/TODO: Remove and pin next (1.20.0?) release in requirements file
    {envpython} -m pip install /home/user/code/tahoe-lafs
    {envpython} -m pytest {posargs}
passenv = *


# Required to pass environment variables to the packaging/building/installing
# stage when using tox 4.0.x. See https://github.com/tox-dev/tox/issues/2543
[testenv:.pkg]
passenv = *


[testenv:lint]
deps =
    -r{toxinidir}/{env:GRIDSYNC_REQUIREMENTS_DIR:requirements}/gridsync.txt
    -r{toxinidir}/{env:GRIDSYNC_REQUIREMENTS_DIR:requirements}/{env:QT_API:pyqt6}.txt
    -r{toxinidir}/{env:GRIDSYNC_REQUIREMENTS_DIR:requirements}/lint.txt
commands =
    # XXX/TODO: Remove and pin next (1.20.0?) release in requirements file
    {envpython} -m pip install /home/user/code/tahoe-lafs
    {envpython} -m ruff check --output-format=full gridsync tests
    {envpython} -m black --line-length=79 --check --diff gridsync tests
    {envpython} -m isort --line-length=79 --check --diff gridsync tests
    {envpython} -m mypy gridsync
    {envpython} -m pylint --reports=no gridsync


[testenv:format]
deps =
    -r{toxinidir}/{env:GRIDSYNC_REQUIREMENTS_DIR:requirements}/lint.txt
commands =
    {envpython} -m black gridsync tests
    {envpython} -m isort gridsync tests


[testenv:pyinstaller]
# Seemingly required to respect environment variables with tox version 4.0.x;
# for some reason, with `usedevelop = True`, we always unded end up pulling in
# PyQt6 on macOS and Linux, even when QT_API=pyqt5 is declared...
usedevelop = False
deps =
    -r{toxinidir}/{env:GRIDSYNC_REQUIREMENTS_DIR:requirements}/gridsync.txt
    -r{toxinidir}/{env:GRIDSYNC_REQUIREMENTS_DIR:requirements}/{env:QT_API:pyqt6}.txt
    -r{toxinidir}/{env:GRIDSYNC_REQUIREMENTS_DIR:requirements}/pyinstaller.txt
    -r{toxinidir}/{env:GRIDSYNC_REQUIREMENTS_DIR:requirements}/tahoe-lafs.txt
    -r{toxinidir}/{env:GRIDSYNC_REQUIREMENTS_DIR:requirements}/magic-folder.txt
commands =
    # XXX/TODO: Remove and pin next (1.20.0?) release in requirements file
    {envpython} -m pip install /home/user/code/tahoe-lafs
    {envpython} -m pip list
    # {envpython} -m pip check
    {envpython} -m PyInstaller -y pyinstaller.spec

[testenv:pyinstaller-windows]
# setuptools >= 66.0.0 breaks Magic-Folder PyInstaller builds on Windows.
# See/follow: https://github.com/gridsync/gridsync/issues/595
deps = {[testenv:pyinstaller]deps}
commands =
    {envpython} -m pip install setuptools<66
    {envpython} -m pip list
    {envpython} -m pip check
    {envpython} -m PyInstaller -y pyinstaller.spec


[testenv:pyinstaller-tahoe]
skip_install = True
deps =
    -r{toxinidir}/{env:GRIDSYNC_REQUIREMENTS_DIR:requirements}/pyinstaller.txt
    -r{toxinidir}/{env:GRIDSYNC_REQUIREMENTS_DIR:requirements}/tahoe-lafs.txt
commands = {[testenv:pyinstaller]commands}

[testenv:pyinstaller-magic-folder]
skip_install = True
deps =
    -r{toxinidir}/{env:GRIDSYNC_REQUIREMENTS_DIR:requirements}/pyinstaller.txt
    -r{toxinidir}/{env:GRIDSYNC_REQUIREMENTS_DIR:requirements}/magic-folder.txt
commands = {[testenv:pyinstaller]commands}

[testenv:pyinstaller-gridsync]
deps =
    -r{toxinidir}/{env:GRIDSYNC_REQUIREMENTS_DIR:requirements}/pyinstaller.txt
    -r{toxinidir}/{env:GRIDSYNC_REQUIREMENTS_DIR:requirements}/gridsync.txt
    -r{toxinidir}/{env:GRIDSYNC_REQUIREMENTS_DIR:requirements}/{env:QT_API:pyqt6}.txt
commands = {[testenv:pyinstaller]commands}


[testenv:integration]
deps =
    -r{toxinidir}/{env:GRIDSYNC_REQUIREMENTS_DIR:requirements}/gridsync.txt
    -r{toxinidir}/{env:GRIDSYNC_REQUIREMENTS_DIR:requirements}/{env:QT_API:pyqt6}.txt
    -r{toxinidir}/{env:GRIDSYNC_REQUIREMENTS_DIR:requirements}/test.txt
commands =
    {envpython} -m pytest -s -v {posargs:tests/integration}


[testenv:update-dependencies]
skip_install = True
install_command = {envpython} -m pip install {opts} {packages}
deps =
    pip-tools
    hashin
commands =
    pip-compile -q --allow-unsafe --generate-hashes --upgrade --output-file={env:GRIDSYNC_REQUIREMENTS_DIR:requirements}/gridsync-base.txt {env:GRIDSYNC_REQUIREMENTS_DIR:requirements}/gridsync.in
    pip-compile -q --allow-unsafe --generate-hashes --upgrade --output-file={env:GRIDSYNC_REQUIREMENTS_DIR:requirements}/tahoe-lafs-base.txt {env:GRIDSYNC_REQUIREMENTS_DIR:requirements}/tahoe-lafs.in
    pip-compile -q --allow-unsafe --generate-hashes --upgrade --output-file={env:GRIDSYNC_REQUIREMENTS_DIR:requirements}/tahoe-lafs-base.txt {env:GRIDSYNC_REQUIREMENTS_DIR:requirements}/tahoe-lafs.in
    pip-compile -q --allow-unsafe --generate-hashes --upgrade --output-file={env:GRIDSYNC_REQUIREMENTS_DIR:requirements}/magic-folder-base.txt {env:GRIDSYNC_REQUIREMENTS_DIR:requirements}/magic-folder.in
    pip-compile -q --allow-unsafe --generate-hashes --upgrade --output-file={env:GRIDSYNC_REQUIREMENTS_DIR:requirements}/pyinstaller-base.txt {env:GRIDSYNC_REQUIREMENTS_DIR:requirements}/pyinstaller.in
    pip-compile -q --allow-unsafe --generate-hashes --upgrade --output-file={env:GRIDSYNC_REQUIREMENTS_DIR:requirements}/test.txt {env:GRIDSYNC_REQUIREMENTS_DIR:requirements}/test.in
    pip-compile -q --allow-unsafe --generate-hashes --upgrade --output-file={env:GRIDSYNC_REQUIREMENTS_DIR:requirements}/lint.txt {env:GRIDSYNC_REQUIREMENTS_DIR:requirements}/lint.in
    pip-compile -q --allow-unsafe --generate-hashes --upgrade --output-file={env:GRIDSYNC_REQUIREMENTS_DIR:requirements}/dmgbuild.txt {env:GRIDSYNC_REQUIREMENTS_DIR:requirements}/dmgbuild.in
    pip-compile -q --allow-unsafe --generate-hashes --upgrade --output-file={env:GRIDSYNC_REQUIREMENTS_DIR:requirements}/pyqt6.txt {env:GRIDSYNC_REQUIREMENTS_DIR:requirements}/pyqt6.in
    pip-compile -q --allow-unsafe --generate-hashes --upgrade --output-file={env:GRIDSYNC_REQUIREMENTS_DIR:requirements}/pyside6.txt {env:GRIDSYNC_REQUIREMENTS_DIR:requirements}/pyside6.in
    # `pip-compile` will not generate hashes for platform-specific dependencies
    # (e.g., those declared via PEP 508 environment markers) nor will it
    # preserve in its output environment markers specified in its input files.
    # To avoid having to "execute pip-compile on each Python environment
    # separately" (as the `pip-tools` README recommends), we use `hashin` here
    # to update our platform-specific dependencies from any host environment.
    # Note, however, that, unlike `pip-compile`, `hashin` updates its files "in
    # place", and so adding/removing dependencies to/from these files must be
    # done manually (e.g., when `pip check` fails due to an unmet requirement).
    hashin --update-all -r {env:GRIDSYNC_REQUIREMENTS_DIR:requirements}/gridsync-platform.txt
    hashin --update-all -r {env:GRIDSYNC_REQUIREMENTS_DIR:requirements}/tahoe-lafs-platform.txt
    hashin --update-all -r {env:GRIDSYNC_REQUIREMENTS_DIR:requirements}/magic-folder-platform.txt
    # Disabled for now because pyinstaller 6.11.1 requires 
    # pefile!=2024.8.26,>=2022.5.30; sys_platform == "win32"
    # but `hashin` always pulls in the latest version..
    # See/follow https://github.com/pyinstaller/pyinstaller/issues/8762
    # hashin --update-all -r {env:GRIDSYNC_REQUIREMENTS_DIR:requirements}/pyinstaller-platform.txt

[testenv:update-github-repo]
skip_install = True
install_command = {envpython} -m pip install {opts} {packages}
deps =
    httpx
commands =
    {envpython} {toxinidir}/scripts/update-github-repo {posargs}
