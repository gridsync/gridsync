[tox]
envlist = py{39,310},lint
skip_missing_interpreters = True
ignore_basepython_conflict = True

[testenv]
usedevelop = True
basepython = {env:TOX_BASEPYTHON:python3.10}
install_command = {envpython} scripts/reproducible-pip.py install --no-deps {opts} {packages}
setenv =
    # The time saved by having bytecode around instead of having to recompile
    # the source code is probably negligible.  Even if it isn't, avoiding the
    # extra complexity involved in having the bytecode around (is it for the
    # right Python version?  How does it interact with the pytest-generated
    # bytecode?  is it up-to-date with respect to the source files?  etc) is a
    # far greater cost.  So, don't have bytecode.
    PYTHONDONTWRITEBYTECODE=1

    # Remove a source of non-determinism from the builds by making sure
    # strings hash to the same value from one run to the next.
    PYTHONHASHSEED=1

    # Avoid modifying logs in the main Gridsync config dir during test runs
    GRIDSYNC_LOGGING_PATH=.logs

    pyqt5: QT_API=pyqt5
    pyqt6: QT_API=pyqt6
    pyside2: QT_API=pyside2
    pyside6: QT_API=pyside6
deps =
    -r{toxinidir}/requirements/gridsync.txt
    -r{toxinidir}/requirements/{env:QT_API:pyqt5}.txt
    -r{toxinidir}/requirements/test.txt
commands =
    {envpython} -m pytest {posargs}
passenv = *


# Required to pass environment variables to the packaging/building/installing
# stage when using tox 4.0.x. See https://github.com/tox-dev/tox/issues/2543
[testenv:.pkg]
passenv = *


[testenv:lint]
deps =
    -r{toxinidir}/requirements/gridsync.txt
    -r{toxinidir}/requirements/{env:QT_API:pyqt5}.txt
    -r{toxinidir}/requirements/lint.txt
commands =
    {envpython} -m black --line-length=79 --check --diff setup.py gridsync tests
    {envpython} -m isort --line-length=79 --check --diff setup.py gridsync tests
    {envpython} {toxinidir}/scripts/mypy-wrapper.py gridsync
    {envpython} -m flake8 setup.py gridsync tests
    {envpython} -m pylint --reports=no gridsync


[testenv:pyinstaller]
# Seemingly required to respect environment variables with tox version 4.0.x;
# for some reason, with usedevelop = True, we always unded end up pulling in
# PyQt5 on macOS and Linux, even when QT_API=pyqt6 is declared...
usedevelop = False
deps =
    -r{toxinidir}/requirements/gridsync.txt
    -r{toxinidir}/requirements/{env:QT_API:pyqt5}.txt
    -r{toxinidir}/requirements/pyinstaller.txt
    -r{toxinidir}/requirements/tahoe-lafs.txt
    -r{toxinidir}/requirements/magic-folder.txt
commands =
    {envpython} -m pip list
    {envpython} -m pip check
    {envpython} -m PyInstaller -y pyinstaller.spec

[testenv:pyinstaller-windows]
# setuptools >= 66.0.0 breaks Magic-Folder PyInstaller builds on Windows.
# See/follow: https://github.com/gridsync/gridsync/issues/595
deps = {[testenv:pyinstaller]deps}
commands =
    {envpython} -m pip install setuptools<66
    {envpython} -m pip list
    {envpython} -m pip check
    {envpython} -m PyInstaller -y pyinstaller.spec

[testenv:pyinstaller-tahoe]
skip_install = True
deps =
    -r{toxinidir}/requirements/pyinstaller.txt
    -r{toxinidir}/requirements/tahoe-lafs.txt
commands = {[testenv:pyinstaller]commands}

[testenv:pyinstaller-magic-folder]
skip_install = True
deps =
    -r{toxinidir}/requirements/pyinstaller.txt
    -r{toxinidir}/requirements/magic-folder.txt
commands = {[testenv:pyinstaller]commands}

[testenv:pyinstaller-gridsync]
deps =
    -r{toxinidir}/requirements/pyinstaller.txt
    -r{toxinidir}/requirements/gridsync.txt
    -r{toxinidir}/requirements/{env:QT_API:pyqt5}.txt
commands = {[testenv:pyinstaller]commands}


[testenv:integration]
deps =
    -r{toxinidir}/requirements/gridsync.txt
    -r{toxinidir}/requirements/{env:QT_API:pyqt5}.txt
    -r{toxinidir}/requirements/test.txt
commands =
    {envpython} -m pytest {posargs:tests/integration}


[testenv:update-hashes]
skip_install = True
install_command = {envpython} -m pip install {opts} {packages}
deps =
    pip-tools
    hashin
commands =
    pip-compile -q --allow-unsafe --generate-hashes --upgrade --output-file=requirements/gridsync-base.txt requirements/gridsync.in
    hashin --update-all -r requirements/gridsync-platform.txt
    pip-compile -q --allow-unsafe --generate-hashes --upgrade --output-file=requirements/tahoe-lafs-base.txt requirements/tahoe-lafs.in
    hashin --update-all -r requirements/tahoe-lafs-platform.txt
    pip-compile -q --allow-unsafe --generate-hashes --upgrade --output-file=requirements/magic-folder-base.txt requirements/magic-folder.in
    hashin --update-all -r requirements/magic-folder-platform.txt
    pip-compile -q --allow-unsafe --generate-hashes --upgrade --output-file=requirements/pyinstaller-base.txt requirements/pyinstaller.in
    hashin --update-all -r requirements/pyinstaller-platform.txt
    pip-compile -q --allow-unsafe --generate-hashes --upgrade --output-file=requirements/test.txt requirements/test.in
    pip-compile -q --allow-unsafe --generate-hashes --upgrade --output-file=requirements/lint.txt requirements/lint.in
    pip-compile -q --allow-unsafe --generate-hashes --upgrade --output-file=requirements/dmgbuild.txt requirements/dmgbuild.in
    pip-compile -q --allow-unsafe --generate-hashes --upgrade --output-file=requirements/pyqt5.txt requirements/pyqt5.in
    pip-compile -q --allow-unsafe --generate-hashes --upgrade --output-file=requirements/pyqt6.txt requirements/pyqt6.in
    pip-compile -q --allow-unsafe --generate-hashes --upgrade --output-file=requirements/pyside2.txt requirements/pyside2.in
    pip-compile -q --allow-unsafe --generate-hashes --upgrade --output-file=requirements/pyside6.txt requirements/pyside6.in

[testenv:update-github-repo]
skip_install = True
install_command = {envpython} -m pip install {opts} {packages}
deps =
    httpx
commands =
    {envpython} {toxinidir}/scripts/update-github-repo {posargs}


[flake8]
ignore = E203, E265, E402, E501, N802, W503
exclude = scripts/*, misc/*,
max-complexity = 10

# .coveragerc
[run]
omit = gridsync/_version.py
